<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat App</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.4/dist/css/bootstrap.min.css"
      rel="stylesheet"
      crossorigin="anonymous"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Poppins", sans-serif;
      }

      body {
        background: linear-gradient(135deg, #000428, #004e92);
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .chat-container {
        width: 400px;
        height: 550px;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(15px);
        border-radius: 15px;
        box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.3);
        display: flex;
        flex-direction: column;
        overflow: hidden;
        border: 2px solid rgba(255, 255, 255, 0.2);
      }

      .chat-header {
        padding: 15px;
        text-align: center;
        font-size: 22px;
        font-weight: bold;
        color: white;
        background: rgba(255, 255, 255, 0.2);
        border-bottom: 2px solid rgba(255, 255, 255, 0.2);
      }

      .chat-body {
        flex: 1;
        padding: 15px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        scrollbar-width: thin;
        scrollbar-color: rgba(255, 255, 255, 0.5) transparent;
      }

      .chat-body::-webkit-scrollbar {
        width: 8px;
      }

      .chat-body::-webkit-scrollbar-thumb {
        background-color: rgba(255, 255, 255, 0.5);
        border-radius: 10px;
      }

      .message {
        max-width: 75%;
        padding: 12px;
        margin-bottom: 12px;
        border-radius: 18px;
        word-wrap: break-word;
        font-size: 15px;
        position: relative;
        animation: fadeIn 0.3s ease-in-out;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .user-message {
        background: linear-gradient(135deg, #00c6ff, #0072ff);
        color: white;
        align-self: flex-end;
        text-align: left;
        box-shadow: 0px 0px 10px rgba(0, 123, 255, 0.5);
      }

      .bot-message {
        background: linear-gradient(135deg, #ff512f, #dd2476);
        color: white;
        align-self: flex-start;
        box-shadow: 0px 0px 10px rgba(255, 81, 47, 0.5);
      }

      .chat-footer {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 10px 12px;
        background: rgba(255, 255, 255, 0.15);
        border-top: 2px solid rgba(255, 255, 255, 0.2);
      }

      .chat-footer input {
        flex: 1;
        padding: 10px 15px;
        border: none;
        border-radius: 25px;
        background: rgba(255, 255, 255, 0.25);
        color: white;
        font-size: 14px;
        min-width: 0;
      }

      .chat-footer input::placeholder {
        color: rgba(255, 255, 255, 0.7);
      }

      .chat-footer button {
        padding: 10px 14px;
        border: none;
        border-radius: 50%;
        background: linear-gradient(135deg, #00c6ff, #0072ff);
        color: white;
        cursor: pointer;
        box-shadow: 0px 0px 8px rgba(0, 123, 255, 0.4);
        font-size: 18px;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .chat-footer button:hover {
        background: linear-gradient(135deg, #0072ff, #00c6ff);
      }

      /* Style mic and stop buttons same size as send */
      #micBtn,
      #stopMicBtn {
        background: linear-gradient(135deg, #ff9a9e, #fad0c4);
        color: white;
        font-size: 18px;
        border-radius: 50%;
        padding: 10px;
        border: none;
        cursor: pointer;
        box-shadow: 0px 0px 8px rgba(255, 123, 123, 0.4);
        display: flex;
        align-items: center;
        justify-content: center;
        height: 44px;
        width: 44px;
      }

      #micBtn:hover,
      #stopMicBtn:hover {
        background: linear-gradient(135deg, #fad0c4, #ff9a9e);
      }
    </style>
  </head>
  <body>
    <div class="chat-container">
      <div class="chat-header">InterviewBot</div>
      <div class="chat-body" id="chatBody">
        <% if (chatHistory.length > 0) { %> <% chatHistory.forEach((chat) => {%>
        <div class="message user-message"><%= chat.input %></div>
        <div class="message bot-message"><%= chat.output %></div>
        <% }); %> <% } %>
      </div>

      <form class="chat-footer" method="post" action="/chat">
        <button type="button" id="micBtn">🎤</button>
        <button type="button" id="stopMicBtn">⛔</button>
        <input
          type="text"
          name="inp"
          id="inp"
          placeholder="Type a message..."
          required
        />
        <button type="submit">🚀</button>
      </form>
    </div>

    <script>
      const chatBody = document.getElementById("chatBody");
      const micBtn = document.getElementById("micBtn");
      const stopMicBtn = document.getElementById("stopMicBtn");
      const inputField = document.getElementById("inp");
      const form = document.querySelector("form");

      var msg = document.getElementsByClassName("bot-message");
      var chatHist = msg[msg.length - 1]?.innerText || "";

      const observer = new MutationObserver(() => {
        chatBody.scrollTop = chatBody.scrollHeight;
      });

      observer.observe(chatBody, { childList: true });

      document.querySelector("form").addEventListener("submit", function () {
        setTimeout(() => {
          chatBody.scrollTop = chatBody.scrollHeight;
        }, 100);
      });

      speak();

      setTimeout(() => {
        chatBody.scrollTop = chatBody.scrollHeight;
      }, 500);

      function speak() {
        if (!chatHist) return;
        const utterance = new SpeechSynthesisUtterance(chatHist);
        utterance.lang = "en-US";
        utterance.rate = 1.3;
        utterance.pitch = 1.5;

        utterance.onend = () => {
          if (SpeechRecognition) {
            recognition.start();
            micBtn.innerText = "🎙️";
          }
        };

        speechSynthesis.speak(utterance);
      }

      const SpeechRecognition =
        window.SpeechRecognition || window.webkitSpeechRecognition;

      let recognition;
      if (SpeechRecognition) {
        recognition = new SpeechRecognition();
        recognition.lang = "en-US";
        recognition.continuous = false;
        recognition.interimResults = false;

        micBtn.addEventListener("click", () => {
          recognition.start();
          micBtn.innerText = "🎙️";
        });

        stopMicBtn.addEventListener("click", () => {
          recognition.stop();
          micBtn.innerText = "🎤";
        });

        recognition.onresult = (event) => {
          const transcript = event.results[0][0].transcript;
          inputField.value = transcript;
          micBtn.innerText = "🎤";
          console.log(transcript);
          form.submit();
        };

        recognition.onerror = (event) => {
          console.error("Speech recognition error:", event.error);
          micBtn.innerText = "🎤";
        };

        recognition.onend = () => {
          micBtn.innerText = "🎤";
        };
      } else {
        micBtn.disabled = true;
        stopMicBtn.disabled = true;
        micBtn.title = "Speech recognition not supported";
        stopMicBtn.title = "Speech recognition not supported";
      }
    </script>
  </body>
</html>
